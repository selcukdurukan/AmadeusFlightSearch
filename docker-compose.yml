version: "3.8"

services:
  config:
    container_name: amadeus_config
    image: "selcukdurukan/config-server:v.0.0.2"
    healthcheck:
      test: "curl --fail --silent http://localhost:8888/actuator/health/readiness | grep UP || exit 1"
      timeout: 10s
      retries: 10
      interval: 10s
      start_period: 10s
    ports:
      - "8888:8888"
    extends:
      file: docker-common-config.yml
      service: network-deploy-service

  postgresql:
    container_name: amadeus_airport_postgresql
    image: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      timeout: 10s
      retries: 10
      interval: 10s
      start_period: 10s
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=AirportsDB
    extends:
      file: docker-common-config.yml
      service: network-deploy-service

  mongodb:
    container_name: amadeus_flight_mongo
    image: mongo
    healthcheck:
      test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
      timeout: 10s
      retries: 10
      interval: 10s
      start_period: 10s
    ports:
      - "27017:27017"
    volumes:
      - data:/data
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
      - MONGO_INITDB_DATABASE=FlightDB
    extends:
      file: docker-common-config.yml
      service: network-deploy-service

  mysql:
    image: mysql:latest
    container_name: amadeus_auths_mysql
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 10s
      retries: 10
      interval: 10s
      start_period: 10s
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: AuthsDB
      MYSQL_USER: mysql
      MYSQL_PASSWORD: root
    extends:
      file: docker-common-config.yml
      service: network-deploy-service

  auth:
    container_name: amadeus_auth
    image: "selcukdurukan/auths-service:v.0.0.2"
    ports:
      - "8080:8080"
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: "jdbc:mysql://mysql:3306/AuthsDB"
    extends:
      file: docker-common-config.yml
      service: microservice-config

  airport:
    container_name: amadeus_airport
    image: "selcukdurukan/airports-service:v.0.0.2"
    ports:
      - "8081:8081"
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: "jdbc:postgresql://postgresql:5432/AirportsDB"
    extends:
      file: docker-common-config.yml
      service: microservice-config

  flight:
    container_name: amadeus_flight
    image: "selcukdurukan/flights-service:v.0.0.2"
    ports:
      - "8082:8082"
    depends_on:
      mongodb:
        condition: service_healthy
    environment:
      SPRING_DATA_MONGODB_HOST: "mongodb"
      APPLICATION-FEIGN_AIRPORT_FEIGN-URL: "http://airport:8081/v1/dev/airports"
    extends:
      file: docker-common-config.yml
      service: microservice-config

volumes:
  data: {}
  mysql-data:

networks:
  amadeus:
    driver: "bridge"


# docker build --build-arg JAR_FILE=config-server/build/libs/config-server-v.0.0.2.jar -t selcukdurukan/config-server:v.0.0.2 .
# docker build --build-arg JAR_FILE=auths-service/build/libs/auths-service-v.0.0.2.jar -t selcukdurukan/auths-service:v.0.0.2 .
# docker build --build-arg JAR_FILE=airports-service/build/libs/airports-service-v.0.0.2.jar -t selcukdurukan/airports-service:v.0.0.2 .
# docker build --build-arg JAR_FILE=flights-service/build/libs/flights-service-v.0.0.2.jar -t selcukdurukan/flights-service:v.0.0.2 .